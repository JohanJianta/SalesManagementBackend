generator client {
  provider = "prisma-client-js"
  // output       = "./generated_client"  // Uncomment to stop using the default path: @prisma/client
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model clusters {
  id             Int                      @id @default(autoincrement()) @db.UnsignedInt
  name           String                   @unique(map: "clusters_name_unique") @db.VarChar(255)
  category       cluster_category         @default(residential)
  is_apartment   Boolean                  @default(false)
  address        String                   @db.VarChar(255)
  thumbnail_url  String?                  @db.VarChar(255)
  map_url        String?                  @db.VarChar(255)
  created_at     DateTime                 @default(now()) @db.DateTime(0)
  updated_at     DateTime                 @default(now()) @db.Timestamp(0)
  products       products[]
  image_hotspots cluster_image_hotspots[]
  promotions     promotions[]
}

model cluster_image_hotspots {
  id         Int                 @id @default(autoincrement()) @db.UnsignedInt
  cluster_id Int                 @db.UnsignedInt
  shape      image_hotspot_shape @default(rectangle)
  x          Float               @db.Float
  y          Float               @db.Float
  width      Float?              @db.Float
  height     Float?              @db.Float
  radius     Float?              @db.Float
  created_at DateTime            @default(now()) @db.DateTime(0)
  cluster    clusters            @relation(fields: [cluster_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "cluster_image_hotspots_cluster_id_foreign")

  @@index([cluster_id], map: "cluster_image_hotspots_cluster_id_foreign")
}

model products {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  cluster_id             Int                      @db.UnsignedInt
  name                   String                   @db.VarChar(255)
  brochure_url           String?                  @db.VarChar(255)
  default_price          BigInt                   @db.BigInt
  corner_price           BigInt                   @db.BigInt
  created_at             DateTime                 @default(now()) @db.DateTime(0)
  updated_at             DateTime                 @default(now()) @db.Timestamp(0)
  clusters               clusters                 @relation(fields: [cluster_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "products_cluster_id_foreign")
  product_units          product_units[]
  product_images         product_images[]
  product_features       product_features[]
  product_specifications product_specifications[]
  image_hotspots         product_image_hotspots[]

  @@index([cluster_id], map: "products_cluster_id_foreign")
}

model product_image_hotspots {
  id         Int                 @id @default(autoincrement()) @db.UnsignedInt
  product_id Int                 @db.UnsignedInt
  shape      image_hotspot_shape @default(rectangle)
  x          Float               @db.Float
  y          Float               @db.Float
  width      Float?              @db.Float
  height     Float?              @db.Float
  radius     Float?              @db.Float
  created_at DateTime            @default(now()) @db.DateTime(0)
  product    products            @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_image_hotspots_product_id_foreign")

  @@index([product_id], map: "product_image_hotspots_product_id_foreign")
}

model product_images {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id Int      @db.UnsignedInt
  image_url  String   @db.VarChar(255)
  is_primary Boolean  @default(false)
  created_at DateTime @default(now()) @db.DateTime(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_images_product_id_foreign")

  @@index([product_id], map: "product_images_product_id_foreign")
}

model product_features {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id Int      @db.UnsignedInt
  name       String   @db.VarChar(50)
  total      String   @db.VarChar(50)
  created_at DateTime @default(now()) @db.DateTime(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_features_product_id_foreign")

  @@index([product_id], map: "product_features_product_id_foreign")
}

model product_specifications {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id Int      @db.UnsignedInt
  name       String   @db.VarChar(50)
  detail     String   @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "product_specifications_product_id_foreign")

  @@index([product_id], map: "product_specifications_product_id_foreign")
}

model product_units {
  id         Int                 @id @default(autoincrement()) @db.UnsignedInt
  product_id Int                 @db.UnsignedInt
  name       String              @db.VarChar(50)
  type       product_unit_type   @default(standard)
  status     product_unit_status @default(ready)
  created_at DateTime            @default(now()) @db.DateTime(0)
  updated_at DateTime            @default(now()) @db.Timestamp(0)
  products   products            @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "product_units_product_id_foreign")
  bookings   bookings[]

  @@index([product_id], map: "product_units_product_id_foreign")
}

model users {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  email      String       @unique(map: "users_email_unique") @db.VarChar(255)
  password   String       @db.VarChar(255)
  role       user_role    @default(sales)
  created_at DateTime     @default(now()) @db.DateTime(0)
  updated_at DateTime     @default(now()) @db.Timestamp(0)
  bookings   bookings[]
  promotions promotions[]
}

model customers {
  id                    Int        @id @default(autoincrement()) @db.UnsignedInt
  identification_number String     @unique(map: "customers_identification_number_unique") @db.Char(16)
  name                  String     @db.VarChar(255)
  phone                 String     @db.VarChar(13)
  created_at            DateTime   @default(now()) @db.DateTime(0)
  updated_at            DateTime   @default(now()) @db.Timestamp(0)
  bookings              bookings[]
}

model bookings {
  id            Int            @id @default(autoincrement()) @db.UnsignedInt
  unit_id       Int            @db.UnsignedInt
  user_id       Int            @db.UnsignedInt
  customer_id   Int            @db.UnsignedInt
  status        booking_status @default(pending)
  created_at    DateTime       @default(now()) @db.DateTime(0)
  updated_at    DateTime       @default(now()) @db.Timestamp(0)
  product_units product_units  @relation(fields: [unit_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "bookings_unit_id_foreign")
  users         users          @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "bookings_user_id_foreign")
  customers     customers      @relation(fields: [customer_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "bookings_customer_id_foreign")

  @@index([customer_id], map: "bookings_customer_id_foreign")
  @@index([unit_id], map: "bookings_unit_id_foreign")
  @@index([user_id], map: "bookings_user_id_foreign")
}

model promotions {
  id            Int       @id @default(autoincrement()) @db.UnsignedInt
  cluster_id    Int?      @db.UnsignedInt
  user_id       Int       @db.UnsignedInt
  title         String    @db.VarChar(255)
  content       String    @db.Text
  thumbnail_url String    @db.VarChar(255)
  created_at    DateTime  @default(now()) @db.DateTime(0)
  expired_at    DateTime? @db.DateTime(0)

  clusters clusters? @relation(fields: [cluster_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "promotions_cluster_id_foreign")
  users    users     @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: NoAction, map: "promotions_user_id_foreign")

  @@index([cluster_id], map: "promotions_cluster_id_foreign")
  @@index([user_id], map: "promotions_user_id_foreign")
}

enum cluster_category {
  residential
  commercial
}

enum image_hotspot_shape {
  rectangle
  circle
}

enum product_unit_type {
  standard
  corner
}

enum product_unit_status {
  ready
  reserved
  sold
}

enum user_role {
  sales
  manager
  admin
}

enum booking_status {
  pending
  completed
  cancelled
}
