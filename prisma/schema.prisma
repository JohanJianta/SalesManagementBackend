generator client {
  provider     = "prisma-client-js"
  // output       = "./generated_client"  // Uncomment to stop using the default path: @prisma/client
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bookings {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  unit_id       Int             @db.UnsignedInt
  user_id       Int             @db.UnsignedInt
  customer_id   Int             @db.UnsignedInt
  status        bookings_status @default(pending)
  created_at    DateTime        @default(now()) @db.DateTime(0)
  updated_at    DateTime        @default(now()) @db.Timestamp(0)
  customers     customers       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_customer_id_foreign")
  product_units product_units   @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_unit_id_foreign")
  users         users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "bookings_user_id_foreign")

  @@index([customer_id], map: "bookings_customer_id_foreign")
  @@index([unit_id], map: "bookings_unit_id_foreign")
  @@index([user_id], map: "bookings_user_id_foreign")
}

model clusters {
  id            Int               @id @default(autoincrement()) @db.UnsignedInt
  name          String            @unique(map: "clusters_name_unique") @db.VarChar(255)
  category      clusters_category @default(residential)
  thumbnail_url String            @db.VarChar(255)
  map_url       String            @db.VarChar(255)
  created_at    DateTime          @default(now()) @db.DateTime(0)
  updated_at    DateTime          @default(now()) @db.Timestamp(0)
  products      products[]
}

model customers {
  id                    Int        @id @default(autoincrement()) @db.UnsignedInt
  identification_number String     @unique(map: "customers_identification_number_unique") @db.Char(16)
  name                  String     @db.VarChar(255)
  phone                 String     @db.VarChar(13)
  created_at            DateTime   @default(now()) @db.DateTime(0)
  updated_at            DateTime   @default(now()) @db.Timestamp(0)
  bookings              bookings[]
}

model product_features {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id Int      @db.UnsignedInt
  name       String   @db.VarChar(50)
  total      String   @db.VarChar(50)
  created_at DateTime @default(now()) @db.DateTime(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_features_product_id_foreign")

  @@index([product_id], map: "product_features_product_id_foreign")
}

model product_images {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id Int      @db.UnsignedInt
  image_url  String   @db.VarChar(255)
  is_primary Boolean  @default(false)
  created_at DateTime @default(now()) @db.DateTime(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_images_product_id_foreign")

  @@index([product_id], map: "product_images_product_id_foreign")
}

model product_specifications {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  product_id Int      @db.UnsignedInt
  name       String   @db.VarChar(50)
  detail     String   @db.Text
  created_at DateTime @default(now()) @db.DateTime(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_specifications_product_id_foreign")

  @@index([product_id], map: "product_specifications_product_id_foreign")
}

model product_units {
  id         Int                  @id @default(autoincrement()) @db.UnsignedInt
  product_id Int                  @db.UnsignedInt
  name       String               @db.VarChar(50)
  status     product_units_status @default(ready)
  price      BigInt
  created_at DateTime             @default(now()) @db.DateTime(0)
  updated_at DateTime             @default(now()) @db.Timestamp(0)
  bookings   bookings[]
  products   products             @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_units_product_id_foreign")

  @@index([product_id], map: "product_units_product_id_foreign")
}

model products {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  cluster_id             Int                      @db.UnsignedInt
  name                   String                   @db.VarChar(255)
  brochure_url           String                   @db.VarChar(255)
  created_at             DateTime                 @default(now()) @db.DateTime(0)
  updated_at             DateTime                 @default(now()) @db.Timestamp(0)
  product_features       product_features[]
  product_images         product_images[]
  product_specifications product_specifications[]
  product_units          product_units[]
  clusters               clusters                 @relation(fields: [cluster_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_cluster_id_foreign")

  @@index([cluster_id], map: "products_cluster_id_foreign")
}

model users {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  email      String     @unique(map: "users_email_unique") @db.VarChar(255)
  password   String     @db.VarChar(255)
  role       users_role @default(sales)
  created_at DateTime   @default(now()) @db.DateTime(0)
  updated_at DateTime   @default(now()) @db.Timestamp(0)
  bookings   bookings[]
}

enum clusters_category {
  residential
  commercial
}

enum product_units_status {
  ready
  reserved
  sold
}

enum users_role {
  sales
  manager
  admin
}

enum bookings_status {
  pending
  completed
  cancelled
}
